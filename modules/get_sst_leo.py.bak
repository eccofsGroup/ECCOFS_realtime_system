#!/usr/bin/env python                                                                                                                                                  # coding: utf-8                                                                                                                                                         
import sys,os
import pandas as pd

import netCDF4 as nc
import numpy as np
import matplotlib.pyplot as plt
import glob


from roms_get_grid import roms_get_grid
from CreateObsFile_SST import CreateObsFile_SST
from add_history import add_history
from accumarrays import accum3d, accum2d


def main(fconfig):

    url = fconfig['obs']['romsobs']['LEO']['URL'];
    subdirs = fconfig['obs']['romsobs']['LEO']['subdirs']

    #  Base file name for output
    base_file_name = fconfig['obs']['romsobs']['LEO']['BASE_FILE_NAME']

    ndays=fconfig['obs']['romsobs']['ndays']
    end_day     = pd.Timestamp.now().normalize()
    start_day   = end_day-timedelta(days=ndays)
    days = pd.date_range(start_day, end_day, freq='D')
    ref_datum = pd.Timestamp(2011,1,1);           # reference datum in ROMS
    ref_datum_leo = pd.Timestamp(1981,1,1);       # reference datum in LEO
    mintime = (ref_datum_leo - ref_datum).days    

    dTime      = 6/24 #6 hours


    grd_file =fconfig['obs']['romsobs']['gridfile']
    scoord = fconfig['obs']['romsobs']['scoord']
    g = roms_get_grid(grd_file, scoord)

    L, M = g['lon_rho'].shape
    IC = np.unique(np.concatenate((np.arange(0, L, 4), [L - 1])))
    JC = np.unique(np.concatenate((np.arange(0, M, 4), [M - 1])))

    # Create the new grid by selecting the decimated indices.
    # np.ix_ creates an open mesh from the index vectors.
    g1 = {}
    g1['lon_rho'] = g['lon_rho'][np.ix_(IC, JC)]
    g1['lat_rho'] = g['lat_rho'][np.ix_(IC, JC)]
    g1['mask_rho_nan'] = g['mask_rho_nan'][np.ix_(IC, JC)]
    g1['IC'] = IC
    g1['JC'] = JC


    day = start_day
    datestr = day.strftime('%Y%m%d')
    storage_dir = os.path.join(url, subdirs[0])
    pattern = os.path.join(storage_dir, f"{datestr}*.nc")
    files = glob.glob(pattern)
    
    # Now pick the first file from the subdir to obtain geographic locations
    with nc.Dataset(files[0]) as ds:
        lon = ds.variables['lon'][:]  # 1D array of longitudes
        lat = ds.variables['lat'][:]  # 1D array of latitudes

    # Assuming g1.lon_rho is a 2D array with shape (L, M)
    L, M = g1['lon_rho'].shape

    # Create grouping arrays, filled with NaN
    latgroup = np.zeros((len(lat), len(lon)), dtype=int)-1
    longroup = latgroup.copy()
    tol = 4 * 0.06  

    for i in range(L):
        for j in range(M):
            # find indices in lon and lat within tolerance of this grid point
            ind_lo = np.where(np.abs(lon - g1['lon_rho'][i, j]) < tol)[0]
            ind_la = np.where(np.abs(lat - g1['lat_rho'][i, j]) < tol)[0]
            if ind_lo.size and ind_la.size:
                latgroup[np.ix_(ind_la, ind_lo)]  = i 
                longroup[np.ix_(ind_la, ind_lo)] = j 

    for day in days:
        datestr = day.strftime('%Y%m%d')
        print(f"Processing day {datestr}")
        all_files = []
        for sub in subdirs:
            storage_dir = os.path.join(url, sub)
            # find all .nc files for this date in this subdirectory
            pattern = os.path.join(storage_dir, f"{datestr}*.nc")
            files = glob.glob(pattern)
            all_files.extend(files)
        if not all_files:
            print("No LEO files found, skipping.")
            continue
            
            
        K = len(all_files); nlat = len(lat); nlon = len(lon)
        sst   = np.full((K, nlat, nlon), np.nan, dtype=float)
        dtime = np.full_like(sst, np.nan); qflag = np.full_like(sst, np.nan)
        for st, file in enumerate(all_files):
            with nc.Dataset(file) as ds:
                # load and bias‐correct SST (to °C)
                #tmp = ds.variables['sea_surface_temperature'][:] - 273.15
                sst[st, :, :] = ds.variables['sea_surface_temperature'][:] - 273.15 - ds.variables['sses_bias'][:]
                # quality flags
                qflag[st, :, :] = ds.variables['quality_level'][:]

                # convert 'time' var (s → days since 2011‑01‑01, ROMS reference datum)
                time_day = ds.variables['time'][:] / 86400.0 + mintime 
                # convert sst_dtime (ms → days) and add to time_days
                dtime_day = ds.variables['sst_dtime'][:].astype(float) / (1000.0 * 3600.0 * 24.0)
            # broadcast onto 2D grid  
            dtime[st, :, :] = time_day + dtime_day 
        # quality control mask
        mindays = (day - ref_datum).days
        bad = ( (sst < -10) | np.isnan(sst) | (qflag != 5) | (dtime < mindays))
        sst[bad]   = np.nan; dtime[bad] = np.nan 
    
        # Compute bin indices
        K = dtime.shape[0]
        tBin    = np.floor((dtime - mindays) / dTime).astype(int)  # same shape (K,L,M)
        # replicate the 2D group arrays along the time axis to make 3D xBin, yBin
        xBin = np.tile(latgroup[np.newaxis, :, :], (K, 1, 1))  # shape (K, L, M)
        yBin = np.tile(longroup[np.newaxis, :, :], (K, 1, 1))   # shape (K, L, M)

        t_bins = int(1/dTime)
        good = (~np.isnan(sst)) & (xBin>=0) & (yBin>=0) & (~np.isnan(dtime))

        # binning times (1d)
        time=accum2d(tBin[good], 0, dtime[good],shape=(t_bins, 1), func=np.mean).ravel()

        # binning in 3d
        sst_mean = accum3d(tBin[good], xBin[good], yBin[good], sst[good], shape=(t_bins, L, M), func=np.mean)
        sst_std = accum3d(tBin[good], xBin[good], yBin[good], sst[good], shape=(t_bins, L, M), func=np.std)

        # apply ROMS mask
        mask3d    = np.tile(g1['mask_rho_nan'][np.newaxis,:,:], (t_bins,1,1))
        sst_mean  = sst_mean * mask3d
        sst_std   = sst_std  * mask3d
    
        # create observation file
        fname   = f"{base_file_name}{mindays:04d}.nc"
        flag = CreateObsFile_SST(fname, sst_mean, g1, time, 311)
        add_history(fname, 'LEO SST', prepend=True)
        add_history(fname, 'Prepared by Julia Levin (julia@marine.rutgers.edu)', prepend=False)


        if flag != 1:
            print(f"  {fname} not created (no data).")

# if __name__ == "__main__":
#     get_sst_leo()
