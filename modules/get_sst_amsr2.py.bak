#!/usr/bin/env python
# coding: utf-8

import sys,os
import pandas as pd
import netCDF4 as nc
import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import LinearNDInterpolator
import warnings


from roms_get_grid import roms_get_grid
#from define_obs_file import define_4dvar_obs_file, obs_provenance_definition_eccofs
from CreateObsFile_SST import CreateObsFile_SST
from add_history import add_history
from accumarrays import accum3d, accum2d

def main(fconfig):
    # Define base URL and file name components
    url = fconfig['obs']['romsobs']['AMSR2']['URL']
    base_file_name =fconfig['obs']['romsobs']['AMSR2']['BASE_FILE_NAME']

    # Import datetime and define start/end dates
    ndays=fconfig['obs']['romsobs']['ndays']    
    end_day     = pd.Timestamp.now().normalize()- pd.Timedelta(days=1)
    start_day     = end_day - pd.Timedelta(days=ndays)
    days = pd.date_range(start_day, end_day, freq='D')
    ref_datum = pd.Timestamp(2011,1,1);
    dTime      = 6/24 #6 hours

    
    grd_file =fconfig['obs']['romsobs']['gridfile']
    scoord = fconfig['obs']['romsobs']['scoord']
    g = roms_get_grid(grd_file, scoord)

    L, M = g['lon_rho'].shape
    IC = np.unique(np.concatenate((np.arange(0, L, 4), [L - 1])))
    JC = np.unique(np.concatenate((np.arange(0, M, 4), [M - 1])))

    # Create the new grid by selecting the decimated indices.
    # np.ix_ creates an open mesh from the index vectors.
    g1 = {}
    g1['lon_rho'] = g['lon_rho'][np.ix_(IC, JC)]
    g1['lat_rho'] = g['lat_rho'][np.ix_(IC, JC)]
    g1['mask_rho_nan'] = g['mask_rho_nan'][np.ix_(IC, JC)]
    g1['IC'] = IC
    g1['JC'] = JC

    datestring = start_day.strftime('%Y%m%d')
    #file = url + datestring + '-ECCOFS-REMSS-L3U_GHRSST-SSTsubskin-AMSR2-RSS_daily.nc'
    file = url + datestring +  fconfig['obs']['romsobs']['AMSR2']['suffix']

    # Read the 'lon' and 'lat' variables from the NetCDF file.
    with nc.Dataset(file, 'r') as ds:
        lon = ds.variables['lon'][:]  # read longitudes
        lat = ds.variables['lat'][:]  # read latitudes

    # Create 2D mesh grids from the 1D lon and lat arrays.
    Lon, Lat = np.meshgrid(lon, lat)


    points = np.column_stack((Lon.ravel(), Lat.ravel()))
    # point for spatial interpolation on g1 grid
    target_pts = np.column_stack((g1['lon_rho'].ravel(), g1['lat_rho'].ravel()))

    for day in days:
        datestr = day.strftime('%Y%m%d')
        print(f"Processing day {datestr}")
        mintime = (day - ref_datum).days
        fname_in = f"{url}{datestr}{fconfig['obs']['romsobs']['AMSR2']['suffix']}"
        if not os.path.exists(fname_in):
            print("  file not found, skipping.")
            continue
        # --- READ & QC ------------------------------------------------
        with nc.Dataset(fname_in) as ds:
            sst   = ds.variables['sea_surface_temperature'][:] - 273.15
            sst  -= ds.variables['sses_bias'][:]
            qflag = ds.variables['quality_level'][:]
            dtime = ds.variables['sst_dtime'][:] /86400 + mintime 
        bad = (sst < -10) | np.isnan(sst) | (qflag != 5)
        sst[bad] = np.nan; dtime[bad] = np.nan
        # bin in time
        K, L, M = dtime.shape
        # Compute bin indices
        tBin    = np.floor((dtime - mintime) / dTime).astype(int)  # same shape (K,L,M)
        xBin    = np.tile(np.arange(0, M).reshape(1,1,M), (K, L, 1))
        yBin    = np.tile(np.arange(0, L).reshape(1,L,1), (K, 1, M))
        t_bins = int(1/dTime)

        good = ~np.isnan(sst) & ~np.isnan(dtime) 

        # binning times (1d)
        time=accum2d(tBin[good], 0, dtime[good],shape=(t_bins, 1), func=np.mean).ravel()

        # binning in 3d
        sst_binned = accum3d(tBin[good], yBin[good], xBin[good], sst[good], shape=(t_bins, L, M), func=np.mean)

        # interpolate in space
        K = sst_binned.shape[0]
        sst_mean = np.empty((K, *g1['lon_rho'].shape))
        for k in range(K):
            values = sst_binned[k].ravel()
            F = LinearNDInterpolator(points, values, fill_value=np.nan)
            sst_mean[k,:,:] = F(target_pts).reshape(g1['lon_rho'].shape)  

        # create observation file
        fname   = f"{base_file_name}{mintime:04d}.nc"

        flag = CreateObsFile_SST(fname, sst_mean, g1, time, 324)
        add_history(fname, 'AMSR2 SST', prepend=True)
        add_history(fname, 'Prepared by Julia Levin (julia@marine.rutgers.edu)', prepend=False)


        if flag != 1:
            print(f"  {fname} not created (no data).")
        
#if __name__ == "__main__":
#    get_sst_amsr2()
